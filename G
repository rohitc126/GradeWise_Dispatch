--------------------------------------------------------------ASPX--------------------------------------------------------------------------------

<asp:Content ID="Content1" ContentPlaceHolderID="head" Runat="Server">
  <script src="../../../../../Jquery/jquery-1.4.2.min.js" type="text/javascript"></script>

    <script src="../../../../../Jquery/jquery.easing-sooper.js" type="text/javascript"></script>

    <script type="text/javascript" src="../../../../../Jquery/jquery.sooperfish.js"></script>

    <script type="text/javascript">
        $(document).ready(function() {
            $('ul.sf-menu').sooperfish();
        });
    </script>
    
      <script type="text/javascript">
        function CheckDatesMinLessMax(source, arg) {
            var day, month, year;
            var fromdate = document.getElementById('<%=txtFDate.ClientID %>');
            var todate = document.getElementById('<%=txtTDate.ClientID %>');
            day = fromdate.value.split("/")[0];
            month = fromdate.value.split("/")[1];
            year = fromdate.value.split("/")[2];
            var fromdate1 = month + '/' + day + '/' + year;
            day = todate.value.split("/")[0];
            month = todate.value.split("/")[1];
            year = todate.value.split("/")[2];
            var todate1 = month + '/' + day + '/' + year;
            var myDate1 = new Date(fromdate1);

            var myDate2 = new Date(todate1);
            if (myDate1 <= myDate2)
                arg.IsValid = true;
            else
                arg.IsValid = false;
        }
        function CheckDatesMonthMax(source, arg) {
            var day, month, year;
            var fromdate = document.getElementById('<%=txtFDate.ClientID %>');
            day = fromdate.value.split("/")[0];
            month = fromdate.value.split("/")[1];
            year = fromdate.value.split("/")[2];
            var fromdate1 = month + '/' + day + '/' + year;
            var myDate1 = new Date(fromdate1);
            var dt = new Date();
            month = dt.getMonth();
            day = dt.getDate();
            year = dt.getFullYear();
            var cdate = month + '/' + 1 + '/' + year;
            var cDate1 = new Date(cdate);
            
            var BranchTypeCode ="<%=Session["BranchType_Code"]%>";
            if(BranchTypeCode == 'BT00000002')   // for Head Office branch type code.         
                arg.IsValid = true;           
            else 
            if (myDate1 < cDate1)
                arg.IsValid = false;
            else
                arg.IsValid = true;
        }

        function checkDate(sender, args) {
            var dt = new Date();
            var day = dt.getDate();
            var month = dt.getMonth();
            var year = dt.getFullYear();
            var dt = new Date(year, month, day);
            var _Predt = new Date(year, month, day - 1);
            if (sender._selectedDate >= dt) {
                alert("Select Previous Date.");
                sender._selectedDate = new Date(_Predt);
                sender._textbox.set_Value(sender._selectedDate.format(sender._format))
            }
        }
    </script>
 <link href="../../../../../css/Report.css" rel="stylesheet" type="text/css" />
  <script src="../../../../../JavaScript/rptPrint.js" type="text/javascript"></script>
</asp:Content>
<asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolder1" runat="Server">
    <table width="100%" style="overflow: scroll;">
        <tr>
            <td>
                <asp:Panel ID="ErrorContainer" runat="server" CssClass="EmptyError">
                    <asp:Label ID="MyMessage" runat="server" Font-Size="10pt"></asp:Label>
                </asp:Panel>
            </td>
        </tr>
    </table>
    <table class="newRptParameter_tbl" cellpadding="2" cellspacing="2">
        <tr>
            <td class="newRptHdr_td" colspan="6" align="center">
                Customer Wise Dispatch Status Register
            </td>
        </tr>
        <tr>
            <td class="newRptHdr_td_1" colspan="6" valign="middle" align="center">
                <div id="MyDiv" runat="server">
                    <span class="RptSelPara">Selection Parameters</span></div>
            </td>
        </tr>
    </table>
    <center>
        <table id="tblPara" runat="server" cellpadding="2" cellspacing="2" class="newRptTable">
            <tr>
                <td class="Left">
                    Region
                </td>
                <td class="Left">
                     <asp:DropDownList ID="DDLArea" runat="server" CssClass="newRpt_dd" AutoPostBack="true"
                        OnSelectedIndexChanged="DDLArea_SelectedIndexChanged">
                        <asp:ListItem Value="0"> Select Region</asp:ListItem>
                    </asp:DropDownList>
                    <asp:RequiredFieldValidator Display="Dynamic" ID="RequiredDDLArea" runat="server"
                        ValidationGroup="vin1" ControlToValidate="DDLArea" ErrorMessage="Select Area."
                        ToolTip="Select Area." SetFocusOnError="True" InitialValue="0">*</asp:RequiredFieldValidator>
                </td>
                <td class="Left">
                    Product
                </td>
                <td class="Left">
                    <asp:DropDownList ID="DDLProduct" runat="server" CssClass="ddlNormal" AutoPostBack="true"
                        OnSelectedIndexChanged="DDLProduct_SelectedIndexChanged">
                    </asp:DropDownList>
                    <asp:RequiredFieldValidator Display="Dynamic" ID="RequiredFieldValidator1" runat="server"
                        ValidationGroup="vin1" ControlToValidate="DDLProduct" ErrorMessage="Select Product."
                        ToolTip="Select Product." SetFocusOnError="True" InitialValue="0">*</asp:RequiredFieldValidator>
                </td>
                <td class="Left">
                    Branch
                </td>
                <td class="Left">
                    <asp:DropDownList ID="DDLLocation" runat="server"
                     CssClass="ddlNormal" AutoPostBack="True" 
                        onselectedindexchanged="DDLLocation_SelectedIndexChanged">
                    </asp:DropDownList>
                </td>
            </tr>
            <tr>
                <td class="Left">
                    Dispatch Location
                </td>
                <td class="Left">
                    <asp:DropDownList ID="DDLPlant" runat="server" CssClass="ddlNormal" 
                        onselectedindexchanged="DDLPlant_SelectedIndexChanged">
                        <asp:ListItem Value="0">All Plant</asp:ListItem>
                    </asp:DropDownList>
                </td>
               <td class="Left">
                    From Date
                </td>
                <td class="Left">
                    <asp:TextBox ID="txtFDate" runat="server" CssClass="newRpt_date" Width="90px"></asp:TextBox>
                    <asp:RequiredFieldValidator Display="Dynamic" ID="RequiredFieldValidator8" runat="server"
                        ValidationGroup="vin1" ControlToValidate="txtFDate" ErrorMessage="Select From Date."
                        ToolTip="Select From Date." Text="*"></asp:RequiredFieldValidator>
                    <SGG:MaskedEditExtender ID="txtFDate_MaskedEditExtender" runat="server" Enabled="True"
                        Mask="99/99/9999" MaskType="Date" TargetControlID="txtFDate">
                    </SGG:MaskedEditExtender>
                    <SGG:CalendarExtender ID="txtFDate_CalendarExtender" runat="server" Enabled="True"
                        Format="dd/MM/yyyy" TargetControlID="txtFDate" OnClientDateSelectionChanged="checkDate">
                    </SGG:CalendarExtender>
                    <asp:RegularExpressionValidator Display="Dynamic" ID="RegularExpressionValidator4"
                        runat="server" ControlToValidate="txtFDate" ErrorMessage="*" SetFocusOnError="True"
                        ToolTip="Enter From Date in (DD/MM/YYYY) Format." ValidationExpression="^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$"
                        ValidationGroup="vin1"></asp:RegularExpressionValidator>
                    <asp:CustomValidator ID="CustomValidator2" runat="server" ErrorMessage="From date is not Less than 1 month before from current date"
                        ToolTip="From date is not Less than 1 month before from current date." ClientValidationFunction="CheckDatesMonthMax"
                        Display="Static" ValidationGroup="vin1" SetFocusOnError="True" ControlToValidate="txtFDate">*</asp:CustomValidator>
                    -
                    <asp:TextBox ID="txtTDate" runat="server" CssClass="newRpt_date" Width="90px"></asp:TextBox>
                    <asp:RequiredFieldValidator Display="Dynamic" ID="RequiredFieldValidator2" runat="server"
                        ValidationGroup="vin1" ControlToValidate="txtTDate" ErrorMessage="Select To Date."
                        ToolTip="Select To Date." Text="*"></asp:RequiredFieldValidator>
                    <SGG:MaskedEditExtender ID="Maskededitextender1" runat="server" Enabled="True" Mask="99/99/9999"
                        MaskType="Date" TargetControlID="txtTDate">
                    </SGG:MaskedEditExtender>
                    <SGG:CalendarExtender ID="Calendarextender1" runat="server" Enabled="True" Format="dd/MM/yyyy"
                        TargetControlID="txtTDate" OnClientDateSelectionChanged="checkDate">
                    </SGG:CalendarExtender>
                    <asp:RegularExpressionValidator Display="Dynamic" ID="RegularExpressionValidator1"
                        runat="server" ControlToValidate="txtTDate" ErrorMessage="*" SetFocusOnError="True"
                        ToolTip="Enter From Date in (DD/MM/YYYY) Format." ValidationExpression="^(0[1-9]|[12][0-9]|3[01])[- /.](0[1-9]|1[012])[- /.](19|20)\d\d$"
                        ValidationGroup="vin1"></asp:RegularExpressionValidator>
                    <asp:CustomValidator ID="CustomValidator1" runat="server" ErrorMessage="To date is not less than from date."
                        ToolTip="To date is not less than from date." ClientValidationFunction="CheckDatesMinLessMax"
                        Display="Static" ValidationGroup="vin1" SetFocusOnError="True" ControlToValidate="txtTDate"> *</asp:CustomValidator>
                </td>
            </tr>
            <tr>
                <td colspan="6" align="center" valign="middle"> 
                    <asp:Button ID="btnShow" runat="server" Text="Show Report" CssClass="newRpt_btn"
                        ValidationGroup="vin1" onclick="btnShow_Click" />
                    <asp:Button ID="btnPrint" runat="server" Text="Print Report" CssClass="newRpt_btn"
                        ValidationGroup="vinl" onclick="btnPrint_Click" />
                    <asp:ValidationSummary ID="ValidationSummary2" ValidationGroup="vinl" ShowMessageBox="true"
                        ShowSummary="false" runat="server" />
                </td>
            </tr>
        </table>
    </center>
      <table class="newRptParameter_tbl" id="tblrpt" runat="server" cellpadding="2" cellspacing="2">
        <tr align="center">
            <td colspan="6" align="center">
                <div>
                    <rsweb:ReportViewer ID="ReportViewer1" runat="server" Font-Names="Verdana" Font-Size="8pt"
                        Height="500px" Width="90%" CssClass="newRptViewer" ShowPrintButton="true" ShowExportControls="true"
                        ShowToolBar="False" ShowCredentialPrompts="False" ShowDocumentMapButton="False"
                        ShowFindControls="False" ShowPageNavigationControls="False" ShowParameterPrompts="False"
                        ShowPromptAreaButton="False" DocumentMapWidth="100%" EnableTheming="True" DocumentMapCollapsed="False">
                    </rsweb:ReportViewer>
                    <asp:ObjectDataSource ID="ObjectDataSource2" runat="server" SelectMethod="GetData"
                        TypeName="DataSet_DispMISTableAdapters."></asp:ObjectDataSource>
                    <asp:ObjectDataSource ID="ObjectDataSource1" runat="server" SelectMethod="GetData"
                        TypeName="DataSet7TableAdapters."></asp:ObjectDataSource>
                </div>
            </td>
        </tr>
    </table>
     <asp:Label ID="lblError" runat="server" CssClass="txtNormal" Text=""> </asp:Label>
</asp:Content>


---------------------------------------------------------------CSS------------------------------------------------------------------------
public partial class SGX_MIS_OperationalMIS_DispatchMIS_Rpt_Gradewise_Dis_Qty : System.Web.UI.Page
{
    BALSGXMIS_BillingMIS_V2 rgc = new BALSGXMIS_BillingMIS_V2();
    BALSGX_SelectCommonMaster SCC = new BALSGX_SelectCommonMaster();
    BALSGX_DispatchMIS dispatch = new BALSGX_DispatchMIS();
    Message msg = new Message();
    protected void Page_Load(object sender, EventArgs e)
    {
        tblPara.Visible = true;
        tblrpt.Visible = false;
        MyDiv.Attributes["onclick"] = ClientScript.GetPostBackEventReference(this, "MyDiv");
        if (!IsPostBack)
        {
            Fill_Area();
            Fill_product();
            FillLocation();
            txtFDate.Text = "01/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString();
            txtTDate.Text = DateTime.Now.Day.ToString() + "/" + DateTime.Now.Month.ToString() + "/" + DateTime.Now.Year.ToString();
        }
    }
    protected void Fill_Area()
    {
        DataTable dt = SCC.AREA_FILL(Session["employee_code"].ToString());
        if (dt.Rows.Count > 0)
        {
            DDLArea.DataSource = dt;
            DDLArea.DataTextField = "State_Name";
            DDLArea.DataValueField = "State_Code";
            DDLArea.DataBind();
            DDLArea.Items.Insert(0, new ListItem("Select Region", "0"));
        }
        else
        {
            DDLArea.Items.Insert(0, new ListItem("Select Region", "0"));
        }

    }
    protected void Fill_product()
    {
        DDLProduct.ClearSelection();
        DDLProduct.Items.Clear();
        DataTable dt_pro = rgc.Fill_PROD_Master();
        DataView dtView = dt_pro.DefaultView;
        dtView.RowFilter = "State_Code='" + DDLArea.SelectedValue.ToString() + "'";
        if (dtView.Count > 0)
        {
            DDLProduct.DataSource = dt_pro;
            DDLProduct.DataTextField = "productName";
            DDLProduct.DataValueField = "productCode";
            DDLProduct.DataBind();
        }
        DDLProduct.Items.Insert(0, new ListItem("Select Product", "0"));
    }

    private void FillLocation()
    {
        DataTable dt_loc = rgc.Fill_location(Session["Employee_Code"].ToString());
        DataView dv_loc = (DataView)dt_loc.DefaultView;

        dv_loc.RowFilter = "ProductCode='" + DDLProduct.SelectedValue.ToString() + "'";

        if (dt_loc.Rows.Count > 0)
        {
            DDLLocation.DataSource = dv_loc;
            DDLLocation.DataTextField = "locationName";
            DDLLocation.DataValueField = "locationCode";
            DDLLocation.DataBind();
        }
        DDLLocation.Items.Insert(0, new ListItem("All Location", "0"));
    }
    private void Fill_Plant(string Location)
    {
        DataTable dtMine = SCC.Select_Mine("Select Mine", Location);

        DataView dv = (DataView)dtMine.DefaultView;

        DataTable dtFinal;

        if (dtMine.Rows.Count > 0)
        {
            dv.RowFilter = "MinePlantType IN (" + 2 + ")";

            dtFinal = dv.ToTable();
        }
        else
        {
            dtFinal = dv.ToTable();
        }
        if (dtFinal.Rows.Count > 0)
        {
            DDLPlant.DataSource = dtFinal;
            DDLPlant.DataTextField = "Long_Name";
            DDLPlant.DataValueField = "ProductMine_Code";
            DDLPlant.DataBind();
            DDLPlant.Items.Insert(0, new ListItem("All Plant", "0"));
        }
        else
        {
            DDLPlant.Items.Insert(0, new ListItem("No Plant", "0"));
        }
    }



    protected void btnShow_Click(object sender, EventArgs e)
    {
        Fill_Report();
    }
    protected void btnPrint_Click(object sender, EventArgs e)
    {

    }
    protected void DDLArea_SelectedIndexChanged(object sender, EventArgs e)
    {
        Fill_product();
    }
    protected void DDLProduct_SelectedIndexChanged(object sender, EventArgs e)
    {
        FillLocation();

    }

    protected void DDLLocation_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (DDLLocation.SelectedIndex != 0)
        {
            Fill_Plant(DDLLocation.SelectedValue);
        }
        else
        {
            DDLPlant.Items.Clear();
            DDLPlant.Items.Insert(0, new ListItem("All Plant", "0"));
        }

    }



    protected void DDLPlant_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    private void Fill_Report()
    {
        try
        {
            DataTable dt = dispatch.GradeWise_Dispatch_Qty(DDLProduct.SelectedValue, DDLLocation.SelectedValue, txtFDate.Text, txtTDate.Text);//txtFDate.Text, txtTDate.Text

            string datevar = "";
            if (txtFDate.Text != "")
                datevar = "Period From : " + txtFDate.Text + " - To : " + txtTDate.Text;

            ReportViewer1.LocalReport.DataSources.Clear();
            //ReportParameter fDate = new ReportParameter("fDate", datevar);
            //ReportParameter tDate = new ReportParameter("tDate", datevar);
            
            if (dt.Rows.Count > 0)
            {
                ReportViewer1.LocalReport.DataSources.Clear();
                //ReportViewer1.LocalReport.ReportPath = "Rpt_Gradewise_Dis_Qty.rdlc";
                //ReportViewer1.LocalReport.DataSources.Add(new ReportDataSource("DataSet_DispMIS_Rpt_Gradewise_Dis_Qty", dt));
               // ReportViewer1.LocalReport.SetParameters(new ReportParameter[] { fDate, tDate });

                ReportViewer1.LocalReport.ReportPath = "SGX/MIS/OperationalMIS/DispatchMIS/OPV2.0/Rpt_Gradewise_Dis_Qty.rdlc";
                ReportViewer1.LocalReport.DataSources.Add(new ReportDataSource("DataSet_DispMIS_rpt_DisMis_1_RedPed", dt));
                ReportViewer1.LocalReport.Refresh();
                ReportViewer1.Visible = true;

                ErrorContainer.Visible = false;
                lblError.Visible = false;

                tblPara.Visible = false;
                tblrpt.Visible = true;
            }

            else
            {
                ReportViewer1.Visible = false;
                lblError.Visible = true;
                ErrorContainer.Visible = true;
                msg.ShowMessage("Data not available in report.", null, ErrorContainer, MyMessage, "Warning");
            }
        }
        catch (Exception ex)
        {
            ErrorContainer.Visible = true;
            msg.ShowMessage(null, ex, ErrorContainer, MyMessage, null);
        }
    }
}
